# TweetStream Master Node Only (TEMPORARY)
# This configuration runs application pods only on master node
# Use this as a temporary workaround while setting up proper image distribution

# Global settings
global:
  imageRegistry: ""
  imagePullSecrets: []

# Application metadata
nameOverride: ""
fullnameOverride: ""
namespaceOverride: ""

# Service Account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# API Configuration
api:
  enabled: true
  name: tweetstream-api
  replicaCount: 1  # Single replica on master
  
  image:
    repository: tweetstream/api
    tag: "1.0.0"
    pullPolicy: Never  # Use local images only
  
  env:
    NODE_ENV: production
    PORT: "3000"
  
  service:
    type: ClusterIP
    port: 3000
    targetPort: 3000
  
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 200m
      memory: 256Mi
  
  autoscaling:
    enabled: false  # Disabled for master-only deployment
  
  livenessProbe:
    httpGet:
      path: /health
      port: 3000
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  readinessProbe:
    httpGet:
      path: /ready
      port: 3000
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# Frontend Configuration
frontend:
  enabled: true
  name: tweetstream-frontend
  replicaCount: 1  # Single replica on master
  
  image:
    repository: tweetstream/frontend
    tag: "1.0.0"
    pullPolicy: Never  # Use local images only
  
  service:
    type: ClusterIP
    port: 80
    targetPort: 80
  
  resources:
    limits:
      cpu: 200m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 64Mi
  
  autoscaling:
    enabled: false  # Disabled for master-only deployment
  
  livenessProbe:
    httpGet:
      path: /health
      port: 80
    initialDelaySeconds: 10
    periodSeconds: 10
  
  readinessProbe:
    httpGet:
      path: /health
      port: 80
    initialDelaySeconds: 5
    periodSeconds: 5

# Database Configuration (PostgreSQL) - Can run on any node
database:
  enabled: true
  name: postgres-primary
  
  image:
    repository: postgres
    tag: "15-alpine"
    pullPolicy: IfNotPresent
  
  auth:
    database: tweetstream
    username: tweetuser
    password: tweetpass123
  
  service:
    type: ClusterIP
    port: 5432
  
  persistence:
    enabled: true
    storageClass: "local-path"
    size: 10Gi
  
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi

# Redis Configuration - Can run on any node
redis:
  enabled: true
  name: redis
  
  image:
    repository: redis
    tag: "7-alpine"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 6379
  
  persistence:
    enabled: false
    storageClass: "local-path"
    size: 1Gi
  
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 128Mi

# Kafka Configuration - DISABLED for now
kafka:
  enabled: false

# Monitoring Configuration - DISABLED for now
monitoring:
  enabled: false

# Ingress Configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
  hosts:
    - host: tweetstream.192.168.1.82.nip.io
      paths:
        - path: /
          pathType: Prefix
          service:
            name: tweetstream-frontend
            port: 80
        - path: /api
          pathType: Prefix
          service:
            name: tweetstream-api
            port: 3000
  tls: []

# Security Configuration
security:
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 1001
    fsGroup: 1001
  
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: false
    runAsNonRoot: true
    runAsUser: 1001

# Network Policies
networkPolicy:
  enabled: false

# Pod Disruption Budget
podDisruptionBudget:
  enabled: false

# FORCE APPLICATION PODS TO MASTER NODE (TEMPORARY)
nodeSelector:
  kubernetes.io/hostname: master-node

tolerations:
- key: node-role.kubernetes.io/control-plane
  operator: Exists
  effect: NoSchedule
- key: node-role.kubernetes.io/master
  operator: Exists
  effect: NoSchedule

affinity: {}

# Additional labels and annotations
commonLabels:
  deployment-type: "temporary-master-only"

commonAnnotations:
  deployment-note: "TEMPORARY: Application pods running on master node only"

# Secrets
secrets:
  jwtSecret: "your-super-secret-jwt-key-change-this-in-production" 