{{- if .Values.kafka.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "tweetstream.fullname" . }}-kafka
  namespace: {{ include "tweetstream.namespace" . }}
  labels:
    {{- include "tweetstream.labels" . | nindent 4 }}
    app.kubernetes.io/component: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "tweetstream.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: kafka
  template:
    metadata:
      labels:
        {{- include "tweetstream.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: kafka
    spec:
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.kafka.persistence.enabled }}
      initContainers:
      - name: kafka-init
        image: "{{ .Values.kafka.image.repository }}:{{ .Values.kafka.image.tag }}"
        command:
        - /bin/bash
        - -c
        - |
          if [ ! -f /var/lib/kafka/data/meta.properties ]; then
            echo "Formatting Kafka storage..."
            kafka-storage format --config /etc/kafka/kafka.properties --cluster-id 4L6g3nShT-eMCtK--X86sw --ignore-formatted
          else
            echo "Kafka storage already formatted, skipping..."
          fi
        env:
        - name: CLUSTER_ID
          value: "4L6g3nShT-eMCtK--X86sw"
        - name: KAFKA_NODE_ID
          value: "1"
        volumeMounts:
        - name: kafka-data
          mountPath: /var/lib/kafka/data
      {{- end }}
      containers:
      - name: kafka
        image: "{{ .Values.kafka.image.repository }}:{{ .Values.kafka.image.tag }}"
        imagePullPolicy: {{ .Values.kafka.image.pullPolicy }}
        ports:
        - containerPort: 9092
          name: kafka
        - containerPort: 9093
          name: controller
        env:
        - name: CLUSTER_ID
          value: "4L6g3nShT-eMCtK--X86sw"
        - name: KAFKA_NODE_ID
          value: "1"
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "PLAINTEXT://{{ include "tweetstream.fullname" . }}-kafka:9092"
        - name: KAFKA_LISTENERS
          value: "PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093"
        - name: KAFKA_INTER_BROKER_LISTENER_NAME
          value: "PLAINTEXT"
        - name: KAFKA_CONTROLLER_LISTENER_NAMES
          value: "CONTROLLER"
        - name: KAFKA_CONTROLLER_QUORUM_VOTERS
          value: "1@{{ include "tweetstream.fullname" . }}-kafka:9093"
        - name: KAFKA_PROCESS_ROLES
          value: "broker,controller"
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_TRANSACTION_STATE_LOG_MIN_ISR
          value: "1"
        - name: KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS
          value: "0"
        - name: KAFKA_NUM_PARTITIONS
          value: "3"
        - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
          value: "true"
        - name: KAFKA_DELETE_TOPIC_ENABLE
          value: "true"
        {{- if .Values.kafka.persistence.enabled }}
        - name: KAFKA_LOG_DIRS
          value: "/var/lib/kafka/data"
        volumeMounts:
        - name: kafka-data
          mountPath: /var/lib/kafka/data
        {{- end }}
        resources:
          {{- toYaml .Values.kafka.resources | nindent 10 }}
        livenessProbe:
          tcpSocket:
            port: 9092
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          tcpSocket:
            port: 9092
          initialDelaySeconds: 30
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 6
      {{- if .Values.kafka.persistence.enabled }}
      volumes:
      - name: kafka-data
        persistentVolumeClaim:
          claimName: {{ include "tweetstream.fullname" . }}-kafka-pvc
      {{- end }}
---
{{- if .Values.kafka.persistence.enabled }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ include "tweetstream.fullname" . }}-kafka-pvc
  namespace: {{ include "tweetstream.namespace" . }}
  labels:
    {{- include "tweetstream.labels" . | nindent 4 }}
    app.kubernetes.io/component: kafka
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.kafka.persistence.size }}
  {{- if .Values.kafka.persistence.storageClass }}
  storageClassName: {{ .Values.kafka.persistence.storageClass }}
  {{- end }}
---
{{- end }}
apiVersion: v1
kind: Service
metadata:
  name: {{ include "tweetstream.fullname" . }}-kafka
  namespace: {{ include "tweetstream.namespace" . }}
  labels:
    {{- include "tweetstream.labels" . | nindent 4 }}
    app.kubernetes.io/component: kafka
spec:
  type: ClusterIP
  ports:
  - port: 9092
    targetPort: 9092
    protocol: TCP
    name: kafka
  - port: 9093
    targetPort: 9093
    protocol: TCP
    name: controller
  selector:
    {{- include "tweetstream.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: kafka
{{- end }} 