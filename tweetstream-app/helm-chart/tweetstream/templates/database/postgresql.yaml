{{- if .Values.database.enabled }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.database.name }}-init-scripts
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "tweetstream.labels" . | nindent 4 }}
    component: database
data:
  01-schema.sql: |
{{ .Files.Get "sql/01-schema.sql" | indent 4 }}
  02-sample-data.sql: |
{{ .Files.Get "sql/02-sample-data.sql" | indent 4 }}

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.database.name }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "tweetstream.labels" . | nindent 4 }}
    component: database
spec:
  serviceName: {{ .Values.database.name }}
  replicas: 1
  selector:
    matchLabels:
      {{- include "tweetstream.selectorLabels" . | nindent 6 }}
      component: database
  template:
    metadata:
      labels:
        {{- include "tweetstream.selectorLabels" . | nindent 8 }}
        component: database
    spec:
      containers:
      - name: postgres
        image: "{{ .Values.database.image.repository }}:{{ .Values.database.image.tag }}"
        imagePullPolicy: {{ .Values.database.image.pullPolicy }}
        ports:
        - containerPort: {{ .Values.database.service.port }}
          name: postgres
        env:
        - name: POSTGRES_DB
          value: {{ .Values.database.auth.database | quote }}
        - name: POSTGRES_USER
          value: {{ .Values.database.auth.username | quote }}
        - name: POSTGRES_PASSWORD
          value: {{ .Values.database.auth.password | quote }}
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        resources:
          {{- toYaml .Values.database.resources | nindent 10 }}
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - {{ .Values.database.auth.username }}
            - -d
            - {{ .Values.database.auth.database }}
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - {{ .Values.database.auth.username }}
            - -d
            - {{ .Values.database.auth.database }}
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: init-scripts
        configMap:
          name: {{ .Values.database.name }}-init-scripts
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
      labels:
        {{- include "tweetstream.labels" . | nindent 8 }}
        component: database
    spec:
      accessModes: ["ReadWriteOnce"]
      {{- if .Values.database.persistence.storageClass }}
      storageClassName: {{ .Values.database.persistence.storageClass | quote }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.database.persistence.size | quote }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.database.name }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "tweetstream.labels" . | nindent 4 }}
    component: database
spec:
  type: {{ .Values.database.service.type | default "ClusterIP" }}
  ports:
  - port: {{ .Values.database.service.port }}
    targetPort: postgres
    protocol: TCP
    name: postgres
  selector:
    {{- include "tweetstream.selectorLabels" . | nindent 4 }}
    component: database
{{- end }} 